#!/usr/bin/env sh
# shellcheck disable=SC2039

readonly VERSION='1.0.1'
readonly AUTHOR='Ralf Hofmann'
readonly CONTACT='<r.hofmann@sap.com>'

if [ -z "${MAXMIND_LICENSE_KEY}" ]; then
  # GeoIP2-Lite download
  readonly GEOIP_BASE_URL='http://geolite.maxmind.com/download/geoip/database'
  readonly GEOIP_DATA_CITY='GeoLite2-City.mmdb'
  readonly GEOIP_ARCH_CITY='gz'
  readonly GEOIP_URL_CITY="${GEOIP_BASE_URL}/${GEOIP_DATA_CITY}.${GEOIP_ARCH_CITY}"
else
  # GeoIP2  download
  readonly GEOIP_LICENSE_KEY="${MAXMIND_LICENSE_KEY}"
  readonly GEOIP_BASE_URL='https://download.maxmind.com/app/geoip_download'
  readonly GEOIP_DATA_CITY='GeoIP2-City.mmdb'
  readonly GEOIP_ARCH_CITY='tar.gz'
  readonly GEOIP_URL_CITY="${GEOIP_BASE_URL}?license_key=${GEOIP_LICENSE_KEY}&edition_id=GeoIP2-City&suffix=${GEOIP_ARCH_CITY}"
fi

readonly GEOIP_MMDB_FILE='GeoIP-City.mmdb'
readonly GEOIP_MMDB_FOLDER="${DATA_FOLDER}/geoip"

###########################################################################
# main functionality of the script
###########################################################################
main()
{
  # initialize all global variables
  _initialize

  # Process command line arguments
  # Options followed by one colon indicate having required argument
  OPTSTR=$(getopt -o Fhv --long force,help,version -n "${SCRIPT_NAME}" -- "$@") || _usage
  eval set -- "$OPTSTR"
  while true ; do
    case "$1" in
      '-F'|'--force')   FORCE=1  ; shift ;;
      '-h'|'--help')    _help    ; exit  ;;
      '-v'|'--version') _version ; exit  ;;
      '--')             shift    ; break ;;
      *)                _usage           ;;
    esac
  done

  if [ $# -gt 1 ]; then
    _usage; _error_exit "too many command line parameter"
  fi

  local GEOIP_MMDB_PATH="${GEOIP_MMDB_FOLDER}/${GEOIP_MMDB_FILE}"
  if [ $# -eq 1 ]; then
    GEOIP_MMDB_PATH="$1"
    shift
  fi

  [ -d "$(dirname -- "${GEOIP_MMDB_PATH}")" ] || \
    (MMDB_FOLDER="$(dirname -- "${GEOIP_MMDB_PATH}")" ; \
     mkdir -p "${MMDB_FOLDER}" ; \
     MMDB_PARENT="$(dirname -- "${MMDB_FOLDER}")" ; \
     chown "$(stat -c %u "${MMDB_PARENT}")":"$(stat -c %g "${MMDB_PARENT}")" "${MMDB_FOLDER}")

  provide_geoip_file "${GEOIP_MMDB_PATH}" "${FORCE:-0}"
}

provide_geoip_file()
{
  command -v curl >/dev/null 2>&1 || _error_exit "curl needs to be installed for downloading GeoIP data"

  local MMDB_FILE MMDB_FORCE MMDB_META MMDB_UID MMDB_GID MMDB_URL MMDB_TMP MMDB_TIME

  MMDB_FILE="$1"        # mmdb file path
  MMDB_FORCE="${2:-0}"  # flag to force mmdb update

  MMDB_META="${MMDB_FILE}"

  [ -f "${MMDB_META}" ] || MMDB_META="$(dirname -- "${MMDB_META}")"

  MMDB_UID="$(stat -c %u "${MMDB_META}")"
  MMDB_GID="$(stat -c %g "${MMDB_META}")"

  MMDB_URL="${GEOIP_URL_CITY}"
  if [ "${MMDB_FORCE}" -eq 0 ] && [ -f "${MMDB_FILE}" ] && [ "$(curl -kSLIs -z"${MMDB_FILE}" -w "%{http_code}" "${MMDB_URL}" | tail -1)" = "304" ]; then
    _message -s -i "GeoIP network database '${MMDB_FILE}' is already up-to-date..."
    return
  fi

  # shellcheck disable=SC2119
  MMDB_TMP="$(_make_temp)"."${GEOIP_ARCH_CITY}"

  _message -s -i "downloading GeoIP network database from url: '${MMDB_URL}'..."
  if curl -jkSLR -# "${MMDB_URL}" -o "${MMDB_TMP}"; then
    MMDB_TIME="$(stat -c %Y "${MMDB_TMP}")" # save timestamp because gunzip is resetting it
    if [ "${MMDB_TMP##*.}" = 'gz' ]; then
      command -v gunzip >/dev/null 2>&1 || _error_exit "gunzip needs to be installed for downloading GeoIP data"
      gunzip -f "${MMDB_TMP}" || _error_exit "failed to decompress GeoIP data archive"
      MMDB_TMP=${MMDB_TMP%.*}
    fi
    if [ "${MMDB_TMP##*.}" = 'tar' ]; then
      command -v tar >/dev/null 2>&1 || _error_exit "tar needs to be installed for downloading GeoIP data"
      tar -Oxf "${MMDB_TMP}" --wildcards "*/${GEOIP_DATA_CITY}" >"${TMP_FOLDER}/${GEOIP_DATA_CITY}" \
        || _error_exit "failed untar GeoIP data archive"
      MMDB_TMP="${TMP_FOLDER}/${GEOIP_DATA_CITY}"
    fi
    [ -s "${MMDB_TMP}" ] || _error_exit "failed to extract GeoIP data file"
    mv -f "${MMDB_TMP}" "${MMDB_FILE}"
    touch -d@"${MMDB_TIME}" "${MMDB_FILE}"
    chown "${MMDB_UID}":"${MMDB_GID}" "${MMDB_FILE}"
    chmod a+r "${MMDB_FILE}"
    _message -s -i "updated GeoIP network database '${MMDB_FILE}'"
  else
    _error_exit "failed to download GeoIP data from url: '${MMDB_URL}'"
  fi
}

###########################################################################
# customized functions
###########################################################################
_usage() {
	printf >&2 'usage: %s [-h|--help] [-v|--version] [-F|--force] [<mmdb file>]\n' "${SCRIPT_NAME}" && exit 1
}

_help() {
cat <<- -EOF-

  ${SCRIPT_NAME} Version ${VERSION}
  by ${AUTHOR} ${CONTACT}

  Simple script to automate the udpate maxmid GeoIP database files

  ${SCRIPT_NAME} [-h|--help] [-v|--version] [-f|--force] [<mmdb file>]

    <mmdb file>  mmdb database as full path [${GEOIP_MMDB_FOLDER}/${GEOIP_MMDB_FILE}]

  Options:

    -h, --help      Display this help message and exit.
    -v, --version   Display version and exit.
    -F, --force     Force update of the database.

-EOF-
}

### begin -- ormos/utility : 1.1.0 / 27-FEB-2017
###########################################################################
# utility functions
###########################################################################

#
# Output version information
#
# shellcheck disable=SC2120
_version() {
  _message -s -f 'Version %s by %s %s\n' "${VERSION}" "${AUTHOR}" "${CONTACT}"
}

#
# Intialize global settings
#
# shellcheck disable=SC2120
_initialize()
{
  set -o nounset -o errexit ; [ -n "${BASH:-}" ] && set -eo pipefail ; [ -n "${_TRACE_:-}" ] && set -x

  # Set file creation mask so that all files are created with 600 permissions.
  # This will help protect temp files.
  umask 066

  # the full qualified path of the script
  # shellcheck disable=SC2034
  SCRIPT_PATH=$(dirname -- "$(_real_path "$0")")
  SCRIPT_NAME=$(basename -- "$0")
  TMP_FOLDER="${TMPDIR:-/tmp/$(id -u)}/${SCRIPT_NAME}-$$"

  # make sure temp folder exists
  [ -d "${TMP_FOLDER}" ] || mkdir -p "${TMP_FOLDER}"

  # verbose level
  _VERBOSE_=${_VERBOSE_:-0}

  # Trap TERM, HUP, and INT signals and properly exit
  trap -- '__exit_handler' EXIT
  trap -- '__terminate_handler' TERM HUP
  trap -- '__abort_handler' INT
}

#
# Output formatted error or text messages
#
# Options:
#   -s Script name used prefix.
#   -e Output error message
#   -w Output warning message
#   -i Output information message
#   -f Printf like format string
#
# Arguments:
#   '-' read message from stdin
#   <*> string holding text message as parameter
#
# shellcheck disable=SC2120
_message()
{
  local IDNX CATG LEN FMT TXT_IDNX TXT_CATG TXT_PRFX TXT_MSG LEN_PRFX=0

  while [ $# -gt 0 ]; do
    case $1 in
      -s ) IDNX="${SCRIPT_NAME}"; shift ;;
      -e ) CATG='ERROR'         ; shift ;;
      -w ) CATG='WARNING'       ; shift ;;
      -i ) CATG='INFO'          ; shift ;;
      -f ) FMT=$2 ; shift       ; shift ;;
      -- ) break                ; shift ;;
      * )  break                          ;;
    esac
  done

  if [ -n "${IDNX:-}" ]; then
    TXT_IDNX="$(printf '%s - ' "$IDNX")"
    LEN_PRFX=$((${#IDNX} + 3))
    TXT_PRFX="$TXT_IDNX"
  fi
  if [ -n "${CATG:-}" ]; then
    TXT_CATG="$(printf '%s: ' "$CATG")"
    LEN_PRFX=$((${#CATG} + 2))
    TXT_PRFX="${TXT_PRFX:-}$TXT_CATG"
  fi

  # check if we should indent
  [ "${LEN:-0}" -lt $LEN_PRFX ] || LEN_PRFX=${LEN:-0}

  # format the output using the format string or default
  # shellcheck disable=SC2059
  if [ -n "${FMT:-}" ]; then
    if [ $# -eq 0 ] || ([ $# -eq 1 ] && [ "$1" = '-' ]); then
      TXT_MSG="$(printf "${FMT}" "$(cat -)")"
    else
      TXT_MSG="$(printf "${FMT}" "$@")"
    fi
  else
    if [ $# -eq 0 ] || ([ $# -eq 1 ] && [ "$1" = '-' ]); then
      TXT_MSG="$(cat -)"
    else
      TXT_MSG="$(printf "$@")"
    fi
  fi

  printf '%*s%s\n' "$LEN_PRFX" "${TXT_PRFX:-}" "$TXT_MSG"
}

#
# Returns string indented by 4 spaces
#
# Arguments:
#   '-' read string from stdin
#   <*> string as parameter
#
# shellcheck disable=SC2120
_indent()
{
  local INDENT='    '

  if [ $# -eq 0 ] || ([ $# -eq 1 ] && [ "$1" = '-' ]); then
    sed -e "s/^/${INDENT}/g"
  else
    # shellcheck disable=SC2001
    echo "$@" | sed -e "s/^/${INDENT}/g"
  fi
}

#
# Returns lowercase string
#
# Arguments:
#   '-' read string from stdin
#   <*> string as parameter
#
# shellcheck disable=SC2120
_tolower()
{
  if [ $# -eq 0 ] || ([ $# -eq 1 ] && [ "$1" = '-' ]); then
    tr '[:upper:]' '[:lower:]'
  else
    echo "$@" | tr '[:upper:]' '[:lower:]'
  fi
}

#
# Returns uppercase string
#
# Arguments:
#   '-' read string from stdin
#   <*> string as parameter
#
# shellcheck disable=SC2120
_toupper()
{
  if [ $# -eq 0 ] || ([ $# -eq 1 ] && [ "$1" = '-' ]); then
    tr '[:lower:]' '[:upper:]'
  else
    echo "$@" | tr '[:lower:]' '[:upper:]'
  fi
}

#
# Trims any leading and trailing tabs or spaces
#
# Arguments:
#   '-' read string from stdin
#   <*> string as parameter
#
# shellcheck disable=SC2120
_trim()
{
  # local VAR="$@"
  # VAR="${VAR#"${VAR%%[![:space:]]*}"}" # remove leading whitespace characters
  # VAR="${VAR%"${VAR##*[![:space:]]}"}" # remove trailing whitespace characters
  # echo "${VAR}"

  if [ $# -eq 0 ] || ([ $# -eq 1 ] && [ "$1" = '-' ]); then
    sed -e 's/^[[:space:]]*//;s/[[:space:]]*$//'
  else
    echo "$@" | sed -e 's/^[[:space:]]*//;s/[[:space:]]*$//'
  fi
}

#
# Function for outputting a time stamp
#
# shellcheck disable=SC2120
_time_stamp()
{
  date -u +%Y-%m-%dT%H:%M:%S%z
}

#
# Function for exit due to fatal program error
#
# Arguments:
#   '-' read message from stdin
#   <1> string holding text message as parameter
#   <2> exit code
#
# shellcheck disable=SC2120
_error_exit()
{
  local MESSAGE

  if [ "${1:-}" = '-' ]; then
    MESSAGE="$(cat -)"
  else
    MESSAGE="${1:-}"
  fi

  _message -s -e "${MESSAGE:-Unknown Error}"  >&2

  exit "${2:-1}"
}

#
# Function to perform action on script exit
#
__exit_handler()
{
  __do_cleanup
}

#
# Function to perform exit if termination signal is trapped
#
__terminate_handler()
{
  _message -s -w "Terminated" >&2

  exit
}

#
# Function to perform exit if interrupt signal is trapped
#
 __abort_handler()
{
  _message -s -w "Aborted by user" >&2

  exit
}

#
# Function to remove temporary files and other housekeeping
#
__do_cleanup()
{
  # remove the temp folder
  [ "${_VERBOSE_:-0}" -lt 3 ] && [ -d "${TMP_FOLDER}" ] && \
    (rm -rf "${TMP_FOLDER}" >/dev/null 2>&1 || :)

  return 0
}

# Function to create a temporary files or folder
#
# Options:
#   -d Create directory instead og file
#
# Arguments:
#   <1> Name mask pattern to use
#
# shellcheck disable=SC2120
_make_temp()
{
  local TMPOPTS='-p'

  if [ "${1:-}" = '-d' ]; then
    TMPOPTS="-d ${TMPOPTS}" ; shift;
  fi
  local TMPMASK="${1:-${SCRIPT_NAME}-XXXXXX}"

  # shellcheck disable=SC2086
  mktemp ${TMPOPTS} "${TMP_FOLDER}" "${TMPMASK}"
}

# Function to retrieve a full filesystem path
#
# Arguments:
#   <1> Absolute or relative filesystem path
#
# shellcheck disable=SC2120
_real_path()
{
  local PTH="${1:-.}"

  if [ -d "$(dirname -- "${PTH}")" ]; then
    # shellcheck disable=SC2155
    local _readlink="$(command -v greadlink || command -v readlink || :)"
    ([ "${_readlink}" ] && "${_readlink}" -f "${PTH}") || \
    ([ -d "${PTH}" ] && (cd "${PTH}"; pwd)) || \
    (cd "$(dirname -- "${PTH}")"; case "${PWD}" in */) echo "${PWD}$(basename -- "${PTH}")"  ;;
                                                    *) echo "${PWD}/$(basename -- "${PTH}")" ;;
                              esac )
  else
    case "${PTH}" in /*) echo "${PTH}" ;; *) echo "${PWD}/${PTH}" ;; esac | \
      (
        local PTS ; IFS=/
        # shellcheck disable=SC2013
        for P in $(cat); do
          case "${P}" in
            ''|'.') ;;
              '..') PTS="$(dirname -- "${PTS}")" ;;
                 *) case "${PTS}" in */) PTS="${PTS}${P}"  ;;
                                      *) PTS="${PTS}/${P}" ;;
                    esac ;;
          esac
        done
        echo "${PTS:-}"
      )
  fi
}

###########################################################################
# Execution starts here
###########################################################################
main "$@"

### end -- ormos/utility : 1.1.0 / 27-FEB-2017